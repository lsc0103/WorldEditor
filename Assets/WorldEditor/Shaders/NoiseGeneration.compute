// WorldEditor GPU加速噪声生成 Compute Shader
// 使用GPU并行计算Perlin噪声，大幅提升地形生成性能
#pragma kernel CSGeneratePerlinNoise

// 输出纹理
RWTexture2D<float> Result;

// 噪声参数
float4 NoiseParams; // x: scale, y: octaves, z: persistence, w: lacunarity
float4 Offset; // x: offsetX, y: offsetY, z: seed, w: unused
float4 TerrainSize; // x: width, y: height, z: maxHeight, w: unused

// Perlin噪声实现
float hash(float2 p)
{
    float3 p3 = frac(float3(p.xyx) * 0.1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.x + p3.y) * p3.z);
}

float noise(float2 p)
{
    float2 i = floor(p);
    float2 f = frac(p);
    
    float a = hash(i);
    float b = hash(i + float2(1.0, 0.0));
    float c = hash(i + float2(0.0, 1.0));
    float d = hash(i + float2(1.0, 1.0));
    
    float2 u = f * f * (3.0 - 2.0 * f);
    
    return lerp(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

float fbm(float2 p)
{
    float value = 0.0;
    float amplitude = 1.0;
    float frequency = 1.0;
    
    // 使用octaves生成分形噪声
    for (int i = 0; i < (int)NoiseParams.y; i++)
    {
        value += amplitude * noise(p * frequency);
        amplitude *= NoiseParams.z; // persistence
        frequency *= NoiseParams.w; // lacunarity
    }
    
    return value;
}

[numthreads(8,8,1)]
void CSGeneratePerlinNoise (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    
    // 确保不越界
    if (id.x >= width || id.y >= height)
        return;
    
    // 将像素坐标转换为世界坐标
    float2 worldPos = float2(
        (float)id.x / (float)width * TerrainSize.x,
        (float)id.y / (float)height * TerrainSize.y
    );
    
    // 应用偏移和缩放
    float2 noisePos = (worldPos + Offset.xy) * NoiseParams.x;
    
    // 计算噪声值
    float noiseValue = fbm(noisePos + Offset.z); // 使用seed作为额外偏移
    
    // 标准化到0-1范围
    noiseValue = saturate(noiseValue * 0.5 + 0.5);
    
    // 写入结果
    Result[id.xy] = noiseValue;
}